*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Copyright (C) 2000-2020 Energy Technology Systems Analysis Programme (ETSAP)
* This file is part of the IEA-ETSAP TIMES model generator, licensed
* under the GNU General Public License v3.0 (see file LICENSE.txt).
*============================================================================*
* PREPPM.MSA Preprocessing for Macro Stand-Alone
*============================================================================*
$GOTO %1
*----------------------------------------------------------------------------
$LABEL MSA
$SETGLOBAL MSA CSA
$IF NOT %MACRO%==N $SETGLOBAL MSA %MACRO%
$KILL TM_UDF
$IFI %MSA%==MSA $BATINCLUDE MSADDF.dd
*----------------------------------------------------------------------------
  ALIAS(IPS,MDM);
  SET CM_LPK(*), CM_LPT(*), XTP(LL);
  PARAMETER CM_LED(LL), TM_XWT(R,LL);
* Periods stuff
  ALIAS(TB,T_1);
  PP(T)$(ORD(T)>1) = YES;
  TB(T)$(ORD(T)=1) = YES;
  TLAST(T--ORD(T)) = YES;
  NYPER(T) = LAGT(T);
  NYPER(TLAST(T+1)) = LAGT(T);
  CM_LED(T+1)=LAGT(T);
  XTP(LL)$=CM_LED(LL);
  XTP(T) = YES;
* Interpolate MACRO-specific parameters
$ BATINCLUDE filparam TM_DDF 'R,' 'C' ",'','','','',''" YEAR T '' ''
$ BATINCLUDE filparam TM_GR 'R,' '' ",'','','','',''" YEAR T '' ''
$ BATINCLUDE filparam TM_GROWV 'R,' '' ",'','','','',''" YEAR XTP '' ''
$ BATINCLUDE filparam TM_HSX 'R,' '' ",'','','','',''" YEAR XTP '' ''
  TM_GDPGOAL(R,TB) = TM_GDP0(R);
  LOOP(PP(T+1),TM_GDPGOAL(R,PP) = TM_GDPGOAL(R,T)*(1+TM_GR(R,T)/100)**NYPER(T));
$IFI NOT %MSA%%CLI%==MSAYES $EXIT
*----------------------------------------------------------------------------
* Preprocess CBA parameters
  Z = MAX(1,ABS(TM_DEFVAL('REFTEMP')));
  F = MAX(0,ROUND(TM_DEFVAL('REFLOSS'),4));
  TM_DAM(R,'IN')$= TM_MDTL(R)$TM_GDP0(R);
  TM_DAM(R,'IN')$= TM_MDTQ(R)$TM_GDP0(R);
  OPTION TM_CATT < TM_HSX;
  TM_CATT(R)$TM_CATT(R) = ((Z**2/F)**0.5)$F;
  TM_DAM(R,'N')$= TM_CATT(R)$TM_GDP0(R);
  MR(R) = SUM((TM_DAM(R,MDM),G_RCUR(R,CUR)),1);
  CNT=SMAX(MR,TM_GDP0(MR));
  LOOP(MR(R)$CNT,IF(TM_GDP0(R)=CNT,CNT=0;TM_DAM(R,'0')=YES));
* Define initial guess for marginal damage for LP
  LOOP((G_RCUR(R,CUR),C(CG(CM_EMIS)))$TM_DAM(R,'0'),DAM_BQTY(R,C) = EPS;
    DAM_COST(R,PP(T),C,CUR) = 1/TM_SCALE_CST / 10**(3.4-2$DIAG('CO2-GTC',C)) *
      SUM(MR(REG),MAX(.01,(2*Z/POWER(TM_CATT(R),2))$TM_CATT(R)+TM_MDTL(R)/Z+2*TM_MDTQ(R)/Z)*TM_GDPGOAL(REG,T)));
  CM_LPK(CM_KIND)=YES; CM_LPT(CM_TKIND)=YES;
  MR(R)=NO;
$EXIT
*----------------------------------------------------------------------------
$LABEL TONLP
* Update forcing functions, reset damage and climate module
$IF DEFINED TM_CATT LOOP(G_RCUR(R,CUR)$TM_DAM(R,'0'),DAM_COST(R,PP,C(CG(CM_EMIS)),CUR) = EPS);
$IF DEFINED DAM_COST $INCLUDE rpt_dam.mod
$IFI NOT %CLI%==YES $EXIT
$ INCLUDE forcupd.cli
$IF NOT DEFINED TM_CATT $EXIT
  LOOP(G_RCUR(R,CUR)$TM_DAM(R,'0'),
    F=REG_WOBJ(R,'DAM-EXT+',CUR); MY_F=REG_WOBJ(R,'DAS',CUR); Z=MAX(0,MIN(MY_F,-F));
    REG_WOBJ(R,'DAS',CUR)=MY_F-Z; REG_WOBJ(R,'DAM-EXT+',CUR)=F+Z);
  CM_MAXC_M(CM_EMIS,XTP) = VAR_CLITOT.LO(CM_EMIS,XTP);
  IF(CARD(TM_DAM),CM_TKIND(CM_EMIS)=NO; VAR_CLITOT.FX(CM_EMIS,XTP)=VAR_CLITOT.L(CM_EMIS,XTP);
  ELSE OPTION CLEAR=CM_KIND,CLEAR=CM_TKIND);
$EXIT
*----------------------------------------------------------------------------
$LABEL TOLP
* Redefine marginal damages
  LOOP((C(CG(CM_EMIS)),G_RCUR(R,CUR))$(CNT$TM_DAM(R,'0')),
    DAM_COST(R,PP(T),C,CUR) = SUM(SUPERYR(T,XTP),ABS(VAR_CLITOT.M(CM_EMIS,XTP)/EQ_TRDBAL.M(T,"NMR"))*CM_EVAR(CM_EMIS,XTP)*OBJ_DISC(R,XTP,CUR)/OBJ_DISC(R,T,CUR)/TM_SCALE_CST));
  CM_TKIND(CM_VAR(CM_LPT))=YES; CM_KIND(CM_VAR(CM_LPK))=YES;
  VAR_CLITOT.LO(CM_EMIS,XTP) = CM_MAXC_M(CM_EMIS,XTP);
  VAR_CLITOT.UP(CM_EMIS,XTP) = INF;
