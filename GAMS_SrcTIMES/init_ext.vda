*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Copyright (C) 2000-2020 Energy Technology Systems Analysis Programme (ETSAP)
* This file is part of the IEA-ETSAP TIMES model generator, licensed
* under the GNU General Public License v3.0 (see file LICENSE.txt).
*=============================================================================*
* INIT_EXT.VDA has all the initial preprocessing for VEDA
*=============================================================================*
* Internal SETs
 SET RP_UX(R,P);
 SET RP_PL(R,P,L);
 SET RTP_PL(R,LL,P);
 SET RPS_UPS(R,P,S);
 SET RP_UPC(R,P,TSL,L);
 SET AFUPS(R,T,P,S);
 SET RP_DP(R,P) //;
 SET DP_LOSD(R,LL,P) //;
 SET FS_EMCB(R,P,C,C);
 SET KEEP_FLOP(R,P,C);
 SET RP_CGC(REG,PRC,CG,COM);
 SET RPC_IREIN(R,P,C,IE,IO) //;
* Sets for commodity specific availabilities
 SET RVPS_LIM(R,LL,P,S,L);
 SET RPS_CAFLAC(R,P,S,L);
* Sets for ACT_EFF processing
 SET RPG_ACE(R,P,CG,IO) //;
 SET RPG_PACE(R,P,CG) //;
 SET RPG_1ACE(R,P,CG,C) //;
 SET RPC_ACE(REG,PRC,CG) //;
*-----------------------------------------------------------------------------
* Internal PARAMATERs
  SCALAR MIYR_BOH / 0 /;
  PARAMETER REG_FIXT //;
  PARAMETER RTFORC(R,LL,LL,P) //;
* For dynamic process bounds
  PARAMETER PRC_DYNUC(UC_N,SIDE,R,ALLYEAR,P,UC_GRPTYPE,BD);
* For special handling of non-standard FLO_SHAR
  PARAMETER RPCG_ASHAR(R,P,CG,CG,S);
  PARAMETER FLO_ASHAR(REG,ALLYEAR,PRC,CG,CG,S,BD);
* For internal IRE prices processing
  PARAMETER PAR_IPRIC(R,ALLYEAR,P,C,TS,IE);
* For partial load efficiencies
  PARAMETER DP_PSUD(R,LL,P,UPT,BD) //;
* For storage level UP availability
  PARAMETER COEF_AFUPS(R,YEAR,P,S) //;
*-----------------------------------------------------------------------------
* Basic Years stuff:
  IF(CARD(DATAYEAR)=0, DATAYEAR(T)=YES;
    DATAYEAR(LL)$(MOD(MAX(1999,MIN(2051,YEARVAL(LL))),5)=0)=YES);
  DATAYEAR(PASTYEAR) = YES;
  DATAYEAR('%DFLBL%') = NO;
  LOOP(T$(ORD(T)=1),IF(ABS(B(T)-YEARVAL(T)+5)>5,B(T)=YEARVAL(T));
    MIYR_1(T)=YES; MIYR_BOH=B(T)-1);
  PYR_S(LL) = YEARVAL(LL)=MIYR_BOH;
$IFI %WAVER%==YES INT_DEFAULT('PASTI')=1;
*-----------------------------------------------------------------------------
* Peaking and Storage stuff
  PRC_PKNO(R,P)$((NCAP_PKCNT(R,'0',P,'ANNUAL')>=10)$NCAP_PKCNT(R,'0',P,'ANNUAL')) = YES;
  PRC_PKAF(R,P)$((NCAP_PKCNT(R,'0',P,'ANNUAL')<= 0)$NCAP_PKCNT(R,'0',P,'ANNUAL')) = YES;
  PRC_STGIPS(R,P,C)$(NOT SUM(PRC_ACTUNT(R,P,CG,UNITS_ACT)$(COM_GMAP(R,CG,C)+SAMEAS(CG,C)),1)) = NO;
* Set penalty cost for partial loads and excess storage cycling
  OPTION TRACKP<STG_MAXCYC; RP_PL(TRACKP,'UP')=YES;
  LOOP(TSL(S(ANNUAL)),
   ACT_CSTUP(R,LL,P,TSL,CUR)=0;
   ACT_CSTUP(R,LL,P,TSL,CUR)$=ACT_CSTPL(R,LL,P,CUR);
   ACT_CSTUP(R,LL,P,TSL,CUR)$TRACKP(R,P) $= NCAP_COST(R,LL,P,CUR);
   ACT_UPS(R,LL,P,S,'FX') $= ACT_MINLD(R,LL,P));
  OPTION CLEAR=TRACKP, RP_UPR<ACT_TIME, RP_UPT<ACT_CSTSD;
$IF NOT %OBMAC%==YES PARAMETER VAR_SIFT(LL,S,L) //;
*-----------------------------------------------------------------------------
* Clean up some parameters
  LOOP(LASTLL(YEAR),
   OPTION CLEAR=UNCD7; UNCD7(R,LL--ORD(LL),C,COM,'','','') $= (VDA_EMCB(R,LL,C,COM) NE 0);
   VDA_EMCB(R,DATAYEAR,C,COM)$(NOT UNCD7(R,YEAR,C,COM,'','','')) = 0;
   OPTION CLEAR=UNCD7; LOOP(IE,UNCD7(R,LL--ORD(LL),P,C,S,ALL_R,CUR) $= (IRE_PRICE(R,LL,P,C,S,ALL_R,IE,CUR) NE 0));
   IRE_PRICE(R,DATAYEAR,P,C,S,ALL_R,IE,CUR)$(NOT UNCD7(R,YEAR,P,C,S,ALL_R,CUR)) = 0;
   OPTION CLEAR=UNCD7; UNCD7(R,LL--ORD(LL),P,CUR,'','','') $= (ACT_COST(R,LL,P,CUR) NE 0);
   ACT_COST(R,DATAYEAR,P,CUR)$(NOT UNCD7(R,YEAR,P,CUR,'','','')) = 0;
   OPTION CLEAR=UNCD7; UNCD7(R,LL--ORD(LL),P,C,S,CUR,'') $= (FLO_DELIV(R,LL,P,C,S,CUR) NE 0);
   FLO_DELIV(R,DATAYEAR,P,C,S,CUR)$(NOT UNCD7(R,YEAR,P,C,S,CUR,'')) = 0;
   OPTION CLEAR=UNCD7; UNCD7(R,LL--ORD(LL),P,C,S,CUR,'') $= (FLO_COST(R,LL,P,C,S,CUR) NE 0);
   FLO_COST(R,DATAYEAR,P,C,S,CUR)$(NOT UNCD7(R,YEAR,P,C,S,CUR,'')) = 0;
  );
  NCAP_CEH(R,LL,P) $= VDA_CEH(R,LL,P);
*-----------------------------------------------------------------------------
* Identify PRC_RESID processes and initialize NCAP_PASTI
  PRC_RESID(R,LL--ORD(LL),P)$((PRC_RESID(R,LL,P)>0)$PRC_RESID(R,LL,P)) = PRC_RESID(R,'0',P)+EPS;
  NCAP_PASTI(R,PYR_S,P)$PRC_RESID(R,'0',P) = 1;
*-----------------------------------------------------------------------------
* Initial Preprocessing of VDA_EMCB and FLO_EMIS
  FLO_EMIS(R,LL,P,CG,C,S) $= FLO_EFF(R,LL,P,CG,C,S);
  OPTION CLEAR=RXX;
  VDA_EMCB(R,DATAYEAR,C,COM)$COM_TMAP(R,'ENV',C) = 0;
  LOOP((R,DATAYEAR,C,COM)$VDA_EMCB(R,DATAYEAR,C,COM),RXX(R,C,COM) = YES;);
  RXX(R,C,COM)$(NOT COM_TMAP(R,'ENV',COM)) = NO;
  LOOP((TOP(R,P,C,'IN'),RXX(R,C,COM)),FS_EMCB(R,P,COM,C)=YES);
  FS_EMCB(R,P,COM,C)$TOP(R,P,COM,'IN') = NO;
  OPTION TRACKPC <= FS_EMCB; TOP(TRACKPC,'OUT') = YES;
  OPTION CLEAR=RXX, CLEAR=TRACKPC, PRC_ACT < PRC_ACTUNT;
  LOOP((R,DATAYEAR,P,CG,C,S)$FLO_EMIS(R,DATAYEAR,P,CG,C,S),RPC_EMIS(R,P,C) = YES);
  TOP(RPC_EMIS(PRC_ACT(R,P),C),'OUT')$(COM_TMAP(R,'ENV',C)*(NOT TOP(R,P,C,'IN'))) = YES;
*-----------------------------------------------------------------------------
* Initial Preprocessing of COM_AGG and FLOP
  COM_AGG(R,LL,C,C)$COM_AGG(R,LL,C,C) = 0;
  VDA_FLOP(R,LL,P,CG,S) $= ACT_FLO(R,LL,P,CG,S);
  KEEP_FLOP(R,P,C)$VDA_FLOP(R,'%DFLBL%',P,C,'ANNUAL') = YES;
$IFI %SHELL%==ANSWER KEEP_FLOP(R,P,C)$PRC_ACTFLO(R,'%DFLBL%',P,C) = YES;
*-----------------------------------------------------------------------------
* Initial Preprocessing of IRE_FLOSUM
  LOOP((R,DATAYEAR,P,C,S,IE,COM,IO)$IRE_FLOSUM(R,DATAYEAR,P,C,S,IE,COM,IO),RPC_IREIO(R,P,COM,'EXP',IO) = YES);
  TOP(PRC_ACT(R,P),C,IO)$RPC_IREIO(R,P,C,'EXP',IO) = YES;
  OPTION CLEAR=PRC_ACT,CLEAR=RPC_IREIO;
*-----------------------------------------------------------------------------
* Handle Updatable OFF-ranges
  NCAP_START(R,P)$(NCAP_START(R,P)<=MIYR_BOH)=0;
  RVP(R,LL,P) $= NCAP_BND(R,LL,P,'N');
  IF(CARD(RVP),
    NCAP_BND(RVP,'N')$(NCAP_BND(RVP,'N')>%EOTIME%) = %EOTIME%;
    NCAP_START(R,P)$RVP(R,'0',P) = NCAP_BND(R,'0',P,'N')+1;
    PRC_NOFF(R,P,LL,EOHYEAR)$RVP(R,LL,P) = NO;
    PRC_NOFF(R,P,BOHYEAR(LL),LL+(NCAP_BND(R,LL,P,'N')-YEARVAL(LL)))$RVP(R,LL,P) = YES);
  NCAP_BND(RVP(R,LL,P),'N') = (YEARVAL(LL)-1)$(ROUND(MOD(NCAP_BND(RVP,'N')-YEARVAL(LL),MAX(1,YEARVAL(LL))))=-1);
  OPTION CLEAR=RVP;
*-----------------------------------------------------------------------------
* Prepare UC_CLI, UC_DYNBND and UC_ACTBET
$ BATINCLUDE equcrtp.vda INIT_EXT
$IF %CLI%==YES
  LOOP((UC_N,SIDE,R,LL,CM_VAR)$UC_CLI(UC_N,SIDE,R,LL,CM_VAR),UC_ATTR(R,UC_N,'RHS','CLI','YES')=YES);
  LOOP(UC_ATTR(R,UC_N,SIDE,UC_GRPTYPE,UC_NAME(TSL)),UC_TSL(R,UC_N,SIDE,TSL)=YES);
$IF DEFINED UC_ACTBET UC_FLOBET(UC_N,ALL_REG,ALLYEAR,PRC,%PGPRIM%) $= UC_ACTBET(UC_N,ALL_REG,ALLYEAR,PRC);
$IF DEFINED UC_ACTBET LOOP((UC_N,R,YEAR,P)$UC_ACTBET(UC_N,R,YEAR,P),UC_GMAP_P(R,UC_N,'ACT',P)=YES);
$IFI %POWERFLO%==YES LOOP(SAMEAS('REACTANCE',UC_N),PRC_REACT(R,T,P) $= UC_CAP(UC_N,'RHS',R,T,P));
$IF DEFINED PRC_REACT $SETGLOBAL POWERFLO YES
*-----------------------------------------------------------------------------
* Load bounds/prices for exogenous trade from previous run if requested
SET PREMILE(ALLYEAR);
$KILL PAR_IRE PAR_IPRIC
$IF NOT SET GDX_IREBND $GOTO IFPRICE
$IF NOT EXIST %GDXPATH%%GDX_IREBND%.GDX $GOTO IFPRICE
$GDXIN %GDXPATH%%GDX_IREBND%
$LOAD RPC_IREIN=RPC_IREIO PREMILE=MILESTONYR PAR_IRE
$IFI %GDX_IREBND%==%GDX_IPRIC% $GOTO LOAD2
$GDXIN
$LABEL IFPRICE
$IF NOT SET GDX_IPRIC $GOTO FINISH
$IF NOT EXIST %GDXPATH%%GDX_IPRIC%.GDX $GOTO FINISH
$GDXIN %GDXPATH%%GDX_IPRIC%
$LABEL LOAD2 LOAD RPC_IREIN=RPC_IREIO PREMILE=MILESTONYR PAR_IPRIC
$GDXIN
$LABEL FINISH
* Remove originally exogenous trade flows
PAR_IRE(R,LL,T,P,C,S,IE)$RPC_IREIN(R,P,C,IE,'OUT') = 0;
PAR_IPRIC(R,T,P,C,TS,IE)$RPC_IREIN(R,P,C,IE,'OUT') = 0;
RPC_IREIN(R,P,C,IE,'OUT') = NO;
