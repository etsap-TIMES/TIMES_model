*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Copyright (C) 2000-2025 Energy Technology Systems Analysis Programme (ETSAP)
* This file is part of the IEA-ETSAP TIMES model generator, licensed
* under the GNU General Public License v3.0 (see file NOTICE-GPLv3.txt).
*=============================================================================*
* pp_prelvl.vda - Auxiliary preprocessing before levelizing
*=============================================================================*
* Called AFTER establishing RTCS_VARC and RPCS_VAR.
*-----------------------------------------------------------------------------
* Restore NCAP_TLIFE for RESID
  LOOP(PYR_S(V),NCAP_TLIFE(R,V,P)$PRC_RESID(R,'%DFLBL%',P) = PRC_RESID(R,'%DFLBL%',P));
*=============================================================================
* For filtering VDA_FLOP, check ACT_EFF groups
  TRACKPC(RPC_SPG(R,P,C))$((NOT RPG_1ACE(R,P,C,C))$RPC_ACE(R,P,%PGPRIM%)) = YES;
  Z = CARD(VDA_FLOP);
  VDA_FLOP(R,LL,P,C,S)$((NOT KEEP_FLOF(R,P,C))$TRACKPC(R,P,C)) = 0;
$IFI %SHELL%==ANSWER PRC_ACTFLO(R,V,P,C)$((NOT KEEP_FLOF(R,P,C))$TRACKPC(R,P,C)) = 0;
  Z = Z-CARD(VDA_FLOP); IF(Z, DISPLAY 'Deleted FLOPS for SPG:',Z);
* Residual values
  ACT_FLO(R,LL,P,C,S)$RPS_PRCTS(R,P,S) = 0;
  OPTION RPC_AFLO < ACT_FLO, RP_GRP < VDA_FLOP, PRC_ACT < RP_GRP, CLEAR=ACT_FLO,CLEAR=KEEP_FLOF,CLEAR=TRACKPC;
  TRACKPC(RP_GRP(RPC)) = YES; RP_GRP(TRACKPC) = NO;
  RP_XRED(PRC_ACT(R,P)) = (NOT RP_PGFLO(R,P)+RP_PGACT(R,P)+RP_SGS(R,P))$(CHP(R,P)->RP_XRED(R,P));
  RPC_AFLO(TRACKPC(RP_STD(RP_XRED),C)) = YES;
  RPC_AFLO(R,P,C)$(TRACKPC(R,P,C)->RPC_PG(R,P,C)) = NO;
  ACT_FLO(R,V,P,C,S)$RPC_AFLO(R,P,C) $= VDA_FLOP(R,V,P,C,S);
  VDA_FLOP(RTP,C,S)$ACT_FLO(RTP,C,S) = 1;
*-----------------------------------------------------------------------------
* Preprocessing of VDA_FLOP after establishing PRC_SPG
* RP_GRP contains only CGs not in topology, but including some C in RPC
  RP_GRP(R,P,CG)$(NOT SUM(RPC(R,P,C)$COM_GMAP(R,CG,C),1)) = NO;
* Set PRC_CG now automatically
  PRC_CG(RP_GRP) = YES;
* Identify processes with PG-based FLO_SUMs
  LOOP(TRACKPC(RPC_PG(R,P,C)),TRACKP(R,P)=YES);
* Add default value for PG commodities not in TRACKPC
  VDA_FLOP(RTP(R,V,P),C,ANNUAL)$((RPC_PG(R,P,C)*(NOT TRACKPC(R,P,C)))$TRACKP(R,P)) = 1;
* Remove all PG commodities from TRACKPC:
  TRACKPC(RPC_PG) = NO;
*-----------------------------------------------------------------------------
* Partition the groups into direct/PG based ones
  CG_GRP(RP_PG(R,P,CG2),CG)$RP_GRP(R,P,CG) = YES;
  RPCC_FFUNC(CG_GRP(TRACKP(R,P),CG2,CG))$SUM(RPC_SPG(R,P,C)$COM_GMAP(R,CG,C),1) = YES;
  CG_GRP(RPCC_FFUNC) = NO; OPTION CLEAR=RP_GRP,CLEAR=PRC_ACT;
*-----------------------------------------------------------------------------
* Remove from TRACKP those processes for which CG has been defined:
  LOOP(RPCC_FFUNC(R,P,CG2,CG),TRACKP(R,P) = NO);
* Add into FFUNC single SPG commodities for remaining TRACKP:
  TRACKP(RP)$(SUM(RPC_SPG(TRACKPC(RP,C)),1)<>1) = NO;
  RPCC_FFUNC(RP_PG(TRACKP(RP),CG),C) $= SUM(RPC_SPG(TRACKPC(RP,C)),1);
  TRACKPC(RPC_SPG(TRACKP,C)) = NO;
*-----------------------------------------------------------------------------
* VDA_FLOP is in the direction from the PG to the CG:
  FLO_FUNC(RTP(R,V,P),CG2,CG,S)$RPCC_FFUNC(R,P,CG2,CG) = VDA_FLOP(RTP,CG,S);
*-----------------------------------------------------------------------------
* Set FLO_SUM for individual commodities in PG:
  FLO_SUM(RTP(R,V,P),CG2,C,CG,S)$(RPC_PG(R,P,C)$RPCC_FFUNC(R,P,CG2,CG)) = VDA_FLOP(RTP,C,S)*(1/PRC_ACTFLO(RTP,C));
* Set FLO_SUM for groups of commodities:
  FLO_SUM(RTP(R,V,P),CG2,C,CG,S)$(RPC_PG(R,P,C)$CG_GRP(R,P,CG2,CG)) = VDA_FLOP(RTP,CG,S)*(1/PRC_ACTFLO(RTP,C));
* Finally, handle single commodities without a group (and not in PG either)
  FLO_SUM(RTP(R,V,P),CG,C,COM,S)$(RP_PG(R,P,CG)*RPC_PG(R,P,C)*TRACKPC(R,P,COM)) $= VDA_FLOP(RTP,COM,S)*(1/PRC_ACTFLO(RTP,C));
  FLO_FUNC(RTP(R,V,P),ACTCG,C,ANNUAL(S))$((FLO_FUNCX(RTP,ACTCG,C)<0)$TRACKPC(R,P,C)) $= VDA_FLOP(RTP,C,S);
  OPTION CLEAR=TRACKP,CLEAR=TRACKPC,CLEAR=VDA_FLOP,CLEAR=CG_GRP,CLEAR=RPCC_FFUNC;
*-----------------------------------------------------------------------------
* Distribute IRE_FLOSUM for ACT; Ignore possible overwriting for now
  PRC_ACTFLO(R,V,P,C) $= FLO_EMIS(R,V,P,%PGPRIM%,C,'ANNUAL')$PRC_MAP(R,'STG',P);
  IRE_FLOSUM(R,V,P,C(ACTCG),S,IE,COM,'OUT') $= FLO_EMIS(R,V,P,C,COM,S)$RP_AIRE(R,P,IE);
* Preprocessing of FLO_EMIS
  OPTION RP_CGC <= FLO_EMIS;
  FLO_EMIS(RTP(R,V,P),C,C,S)$(RP_CGC(R,P,C,C)$RPC_PG(R,P,C)) = 1+(FLO_EMIS(RTP,C,C,S)-1)/PRC_ACTFLO(RTP,C);
  RP_CGC(RP_IRE(R,P),CG,C)=NO; RP_CGC(RPC_STG,C)=NO;
  RPCC_FFUNC(RP_CGC(RPC,COM)) = YES;
  RP_CGC(RPCC_FFUNC(RPC,COM)) = NO;
  RPC_EMIS(R,P,C)$SUM(RPCC_FFUNC(R,P,COM,C),1) = NO;
* Add groups of source commodities
  FSCK(RP_CGC(R,P,CG,COM),C)$(COM_GMAP(R,CG,C)$RPC(R,P,C)) = YES;
  LOOP(FSCK(R,P,CG,COM,C), FLO_SUM(R,V,P,COM,C,COM,S) $= FLO_EMIS(R,V,P,CG,COM,S));
  RPC_EMIS(R,P,COM)$SUM(FSCK(R,P,CG,COM,C),1) = NO;
* Add activity sources
  FLO_SUM(RTP(R,V,P),COM,C,COM,S)$(RPC_PG(R,P,C)$RP_CGC(R,P,%PGPRIM%,COM)) = FLO_EMIS(RTP,%PGPRIM%,COM,S)/PRC_ACTFLO(RTP,C);
  RP_CGC(R,P,%PGPRIM%,C) = NO; PUTGRP=0;
  LOOP(RP_CGC(R,P,CG,COM)$RPC_EMIS(R,P,COM),
$   BATINCLUDE pp_qaput.mod PUTOUT PUTGRP 01 'FLO_EMIS with no members of source group in process - ignored'
    PUT QLOG ' WARNING       -     R=',%RL%,' P=',%PL%,' CG=',CG.TL,' COM=',COM.TL;
  );
  FLO_SUM(RTP(R,V,P),COM,C,COM,ANNUAL)$RPC_PG(R,P,C) $= SUM(RP_CGC(R,P,CG,COM)$RPC_EMIS(R,P,COM),EPS);
* Add single source commodities
  OPTION CLEAR=RP_CGC, CLEAR=FSCK, CLEAR=RPC_EMIS, CG_GRP < RPCC_FFUNC;
  FLO_SUM(RTP(R,V,P),C,COM,C,S)$CG_GRP(R,P,C,COM) = FLO_EMIS(RTP,COM,C,S);
  FLO_EFF(RTP(R,V,P),C,COM,S)$((NOT CG_GRP(R,P,C,COM))$RPC_PG(R,P,COM)$CHP(R,P)) $= FLO_EMIS(RTP,%PGPRIM%,C,S);
  OPTION NE<IRE_BND,CLEAR=CG_GRP,CLEAR=RPCC_FFUNC,CLEAR=FLO_EMIS;
*=============================================================================
* Other preprocessing stuff for the VEDA interface
*=============================================================================
* Remove non-standard shares from FLO_SHAR
  FLO_ASHAR(R,DM_YEAR,P,C,CG,S,BD) $= FLO_SHAR(R,DM_YEAR,P,C,CG,S,BD)$(NOT RP_STD(R,P));
  FLO_SHAR(R,LL,P,C,CG,S,BD)$FLO_ASHAR(R,LL,P,C,CG,S,BD) = 0;
  NCAP_CHPR(RTP(R,V,P),'N') $= NCAP_CHPR(R,'0',P,'N');
* Support for levelised FLO_FR
  RPC_CONLY(RTP,C) $=SUM(L$FLO_FR(RTP,C,'ANNUAL',L),1);
$ BATINCLUDE pp_lvlfc.mod FLO_FR 'P,C' RPCS_VAR ',BD' ",'0','0'" ALL_TS T RPC_CONLY(R,T,P,C)
  FLO_FR(RPC_CONLY(R,T,P,C),S,'N')=MIN(1,SUM(RS_BELOW1(R,S,TS)$RPCS_VAR(R,P,C,TS),G_YRFR(R,TS)))$TS_CYCLE(R,S);
  FLO_FR(RPC_CONLY(R,T,P,C),S,BD)$FLO_FR(R,T,P,C,S,BD)=FLO_FR(R,T,P,C,S,BD)*G_YRFR(R,S)$RPCS_VAR(R,P,C,S);
* Support using aggregated ANNUAL variable for FLO_FR fractions
  IF(CARD(FLO_FR),
    RVPCSL(RTPC(R,T,P,C),TS(S+STOA(S)),BD)$(FLO_FR(R,'0',P,C,TS,BD)$FLO_FR(RTPC,S,BD)) = YES;
    RVPCSL(RTPC(R,T,P,C),S+STOA(S),BD)$FLO_FR(RTPC,S,'N') = NO;
    RVPCSL(RTPC(R,T,P,C),S,'N')$TS_CYCLE(R,S) $= SUM(RVPCSL(RTPC,TS,BD),1));
  FLO_FR(RVPCSL(R,T,P,C,S,'N'))$(NOT RPCS_VAR(R,P,C,S)) = EPS+1$ANNUAL(S);
* Cleanup some dummies
  TOP_IRE('IMPEXP',C,R,C,P(DUMIMP))$(NOT NE(R,C)) = NO;
  OPTION CLEAR=NE,CLEAR=RVPCSL,CLEAR=RPC_CONLY;
* Call the powerflo extension
$IFI %POWERFLO%==YES $include powerflo.vda
*-----------------------------------------------------------------------------
* Set COM_VAR default bounds
  COM_BNDNET(R,T,C,ANNUAL(S),'N')$(NOT COM_BNDNET(R,T,C,S,'N')) $=COM_BNDNET(R,'0',C,S,'N');
  COM_BNDNET(RTCS_VARC(RTC,S),BDLOX(BD))$((NOT COM_BNDNET(RTC,S,BD))$COM_BNDNET(RTC,'ANNUAL','N')) =
    (EPS-INF$BDNEQ(BD))$(-SIGN(COM_BNDNET(RTC,'ANNUAL','N'))=1$BDNEQ(BD));
  COM_BNDPRD(R,T,C,ANNUAL(S),'N')$(NOT COM_BNDPRD(R,T,C,S,'N')) $=COM_BNDPRD(R,'0',C,S,'N');
  COM_BNDPRD(RTCS_VARC(RTC,S),BDLOX(BD))$((NOT COM_BNDPRD(RTC,S,BD))$COM_BNDPRD(RTC,'ANNUAL','N')) =
    (EPS-INF$BDNEQ(BD))$(-SIGN(COM_BNDPRD(RTC,'ANNUAL','N'))=1$BDNEQ(BD));
*-----------------------------------------------------------------------------
* Remove timeslices turned off if DYNTS enabled
$IF NOT %RTS%==S $BATINCLUDE dynslite.vda PRELEV